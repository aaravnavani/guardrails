name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        # TODO: fix errors so that we can run `make dev` instead
        run: |
          make full

      - name: Lint with isort, black, docformatter, flake8
        run: |
          make lint

  Typing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["1.10.9", "2.4.2"]
        openai-version: ["1.2.4"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ matrix.pydantic-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        # TODO: fix errors so that we can run `make dev` instead
        run: |
          make full
          poetry run pip install pydantic==${{ matrix.pydantic-version }}
          poetry run pip install openai==${{ matrix.openai-version }}

      - name: Static analysis with pyright
        run: |
          make type

  Pytests:
    runs-on: LargeBois
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        # TODO: fix errors so that we can run both `make dev` and `make full`
        # dependencies: ['dev', 'full']
        dependencies: ["full"]
        pydantic-version: ["1.10.9", "2.4.2"]
        openai-version: ["1.2.4"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ matrix.pydantic-version }}-${{ matrix.openai-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: |
          make ${{ matrix.dependencies }}
          poetry run pip install pydantic==${{ matrix.pydantic-version }}
          poetry run pip install openai==${{ matrix.openai-version }}

      - name: Run Pytests
        run: |
          make test-cov

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true